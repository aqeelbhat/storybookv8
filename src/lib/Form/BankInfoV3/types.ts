import { Address, Attachment, BankKey, EncryptedData, IDRef, IntermediaryBankInfo, Option } from "../../Types"
import { BankDetails } from "../BankInfoV4/types"
import { CountryBankKey, EnumsDataObject, Field, TrackedAttributes,  } from "../types"

export type PaymentModeType = 'ach' | 'wire' | 'check' | 'online' | 'invoice' | 'bankgirot' | 'directDebit' | 'upi' | 'paypal' | 'banktransfer'

export interface PaymentModeConfig {
  alpha2Code: string
  domestic?: PaymentModeType[]
  international?: PaymentModeType[]
  description?: string
}

export interface PaymentMode {
  companyEntityCountry?: string
  type?: PaymentModeType
  currencyCode?: string
  additionalCurrencyRequested?: string
}

export interface PaymentModeFormProps {
  data?: PaymentMode[]
  bankCountry?: string
  bankCurrency?: string
  paymentModeOptions?: { [country: string]: PaymentModeType[] }
  currencyOptions?: Option[]
  onChange?: (value?: PaymentMode[]) => void

  forceValidate?: boolean
  canShowEntities?: boolean
  companyEntities?: Option[]
  companyEntityOptions?: Option[]
  fetchEntityChildren?: (parent: string, childrenLevel: number) => Promise<Option[]>
  onEntitySearch?: (keyword: string) => Promise<Option[]>
  onEntityChange?: (value: Option[]) => void
}

export interface BankInfo {
  currencyCode?: Option
  bankAddress?: Address

  bankName?: string
  bankNameAutoGenerated?: boolean
  accountHolder?: string
  accountHolderAddress?: Address

  accountType?: string
  accountNumber?: EncryptedData
  accountNumberAutoGenerated?: boolean
  paymentAddress?: EncryptedData

  key?: BankKey
  bankCode?: string
  encryptedBankCode?: EncryptedData
  bankCodeAutoGenerated?: boolean
  bankCodeError?: boolean

  // Deprecated in V4:
  key2?: BankKey
  bankCode2?: string
  encryptedBankCode2?: EncryptedData
  bankCode2Error?: boolean
  //

  isIbanAvailable?: boolean
  internationalKey?: BankKey
  internationalCode?: string
  encryptedInternationalBankCode?: EncryptedData
  internationalCodeError?: boolean

  swiftCode?: string
  swiftCodeAutoGenerated?: boolean
  swiftCodeError?: boolean

  checkDeliveryAddress?: Address
}

export type BankDocumentType = 'bankletter' | 'estatement' | 'letterhead' | 'invoicewithbank' | 'voidcheck' | 'quotation' | 'contract' |
  'proformainvoice' | 'blankinvoice' | 'debitform' | 'banklettermex' | 'estatementmex' | 'iban' | 'rib' | 'bankpermitchina' |
  'supplierbankletterchina' | 'bankconfirmation' | 'bankpassbook'

export type BankProofConfig = {
  alpha2Code: string
  documents: BankDocumentType[]
}

export interface PaymentDetail {
  id?: string

  companyEntities?: Option[]
  paymentModes?: PaymentMode[]
  bankInformation?: BankInfo
  intermediaryBankRequired?: boolean
  intermediaryBankInformation?: IntermediaryBankInfo
  documentType?: BankDocumentType
  attachment?: Attachment
  selectedExistingBankInfo?: boolean

  // For internal use only (used while validating bank info)
  isDomestic?: boolean
  isDomestic2?: boolean
  isInternational?: boolean
  bankKeys?: CountryBankKey
}

export interface PaymentDetailsFormData {
  formApplicableForExtension?: boolean
  companyEntities?: Option[]
  businessEmail?: string
  existingPaymentDetails?: PaymentDetail[]
  paymentDetails?: PaymentDetail[]
  instruction?: string
}

export interface PaymentDetailFormProps {
  existing?: boolean
  selected?: boolean
  index?: number
  last?: boolean
  title?: string
  data?: PaymentDetail
  existingData?: PaymentDetail
  canExtend?: boolean
  fields?: Field[]
  hideCompanyEntitySelector?: boolean
  companyEntityOptions?: Option[]
  currencyOptions?: Option[]
  countryOptions?: Option[]
  bankKeys?: EnumsDataObject[]
  partnerName?: string
  partnerCountry?: string
  partnerCurrency?: string
  bankProofConfig?: BankProofConfig[]
  paymentModeConfig?: PaymentModeConfig[]
  forceValidate?: boolean
  trackedAttributes?: TrackedAttributes,
  showHideButton?: boolean
  allowBankPayoutCurrencyRequest?: boolean
  getBankDetails?: (bankCode: string, bankKey: BankKey, bankCountryCode?: string) => Promise<BankDetails[]>
  fetchChildren?: (parent: string, childrenLevel: number, masterDataType?: string) => Promise<Option[]>
  searchOptions?: (keyword?: string, masterDataType?: string) => Promise<Option[]>
  onReady?: (fetchData: () => PaymentDetail) => void
  getCrossBorderStatuses?: (bankCountry: string, entityCountries: string[]) => Promise<{ [entityCountry: string]: boolean}>
  getCountryBankKeys?: (bankCountry: string, currency?: string) => Promise<CountryBankKey>
  validateBankInfo?: (bankInfo: BankInfo | IntermediaryBankInfo, validateInternational: boolean) => Promise<boolean>
  onPlaceSelectParseAddress?: (data: google.maps.places.PlaceResult) =>  Promise<Address>
  loadDocument?: (fieldName: string, type?: string, fileName?: string) => Promise<Blob>
  onDeleteClick?: () => void
  onValueChange?: (fieldName: string, updatedForm: PaymentDetail, isAttachment?: boolean) => void
  onToggleSelection?: (isSelected: boolean) => void
  onEdit?: () => void
}

export interface SupplierPaymentDetailsFormProps {
  formData?: PaymentDetailsFormData
  fields?: Field[]
  companyEntities?: Option[]
  existingPaymentDetails?: Array<PaymentDetail>
  countryOptions?: Option[]
  currencyOptions?: Option[]
  bankKeys?: EnumsDataObject[]
  partnerName?: string
  partnerCountry?: string
  partnerCurrency?: string
  bankProofConfig?: BankProofConfig[]
  paymentModeConfig?: PaymentModeConfig[]
  isInPortal?: boolean
  trackedAttributes?: TrackedAttributes,
  submitLabel?: string
  cancelLabel?: string
  getBankDetails?: (bankCode: string, bankKey: BankKey) => Promise<BankDetails[]>
  fetchChildren?: (parent: string, childrenLevel: number, masterDataType?: string) => Promise<Option[]>
  searchOptions?: (keyword?: string, masterDataType?: string) => Promise<Option[]>
  onSubmit?: (formData: PaymentDetailsFormData) => void
  onCancel?: () => void
  onReady?: (fetchData: (skipValidation?: boolean) => PaymentDetailsFormData) => void
  onValueChange?: (fieldName: string, fieldPath: string, updatedForm: PaymentDetailsFormData) => void
  getCrossBorderStatuses?: (bankCountry: string, entityCountries: string[]) => Promise<{ [entityCountry: string]: boolean}>
  getCountryBankKeys?: (bankCountry: string, currency?: string) => Promise<CountryBankKey>
  onFilterBankCountries?: (modes: PaymentModeType[], entityCountry: string) => Promise<string[]>
  validateBankInfo?: (bankInfo: BankInfo | IntermediaryBankInfo, validateInternational: boolean) => Promise<boolean>
  onPlaceSelectParseAddress?: (data: google.maps.places.PlaceResult) =>  Promise<Address>
  loadDocument?: (fieldName: string, type?: string, fileName?: string) => Promise<Blob>
}
