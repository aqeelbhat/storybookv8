import React from "react";
import { StoryFn } from "@storybook/react";

import { FormView, getI18NInstance } from "../../lib";
import { questionnaire } from "./mock data";
import { mockAddress, mockCsvFile } from "../mocks/file.mock";
import {
  mockCategory,
  mockCountryOptions,
  mockCurrencyOptions,
  mockDocumentTypeOptions,
  mockOptionsDefault,
  mockUnitPerQuantity,
} from "../MultiLevelSelect/mocks";
import { FormViewProps } from "../../lib/CustomFormDefinition/NewView/FormView.component";
import { mockConfig } from "./mock copy";
import { mockConfig2 } from "./mock debug 2";

const extensionFormData = {
  _p_Conductivity__p_: "value 1",
  _p_Material_description__p_: "value 1",
  _p_Material_length__p_: "value 1",
  _p_Material_volume__p_: "value 1",
  _p_Material_weight__p_: "value 1",
  _p_Ventilation__p_: "value 1",
};

//ðŸ‘‡ This default export determines where your story goes in the story list
export default {
  title: "ORO UI Toolkit/New Custom Form Definition/Edit",
  component: FormView,
};

export const draftDocumentList = [
  {
    versionNum: "1",
    created: "2023-12-06T11:02:23.038852662Z",
    updated: "2023-12-06T11:06:12.445897443Z",
    createdBy: {
      tenantId: "foo",
      tenantName: "Foo Company",
      userName: "john@foo.com",
      name: "John Doe",
      department: null,
      departmentCode: null,
      departmentErpId: null,
      groupIds: null,
      type: "Tenant",
      email: "john@foo.com",
      phone: null,
      firstName: null,
      lastName: null,
      api: false,
      picture: null,
      ip: "152.57.229.135",
      impersonator: null,
      connectionName: null,
      procurementAdmin: true,
      admin: true,
      otp: false,
    },
    updatedBy: {
      tenantId: "foo",
      tenantName: "Foo Company",
      userName: "john@foo.com",
      name: "John Doe",
      department: null,
      departmentCode: null,
      departmentErpId: null,
      groupIds: null,
      type: "Tenant",
      email: "john@foo.com",
      phone: null,
      firstName: null,
      lastName: null,
      api: false,
      picture: null,
      ip: "152.57.229.135",
      impersonator: null,
      connectionName: null,
      procurementAdmin: true,
      admin: true,
      otp: false,
    },
    audit: {
      entries: [
        {
          time: "2023-12-06T11:06:12.445190599",
          userId: {
            tenantId: "foo",
            tenantName: "Foo Company",
            userName: "john@foo.com",
            name: "John Doe",
            department: null,
            departmentCode: null,
            departmentErpId: null,
            groupIds: null,
            type: "Tenant",
            email: "john@foo.com",
            phone: null,
            firstName: null,
            lastName: null,
            api: false,
            picture: null,
            ip: "152.57.229.135",
            impersonator: null,
            connectionName: null,
            procurementAdmin: true,
            admin: true,
            otp: false,
          },
          ip: "152.57.229.135",
        },
      ],
    },
    acl: {
      users: null,
      groups: null,
      workstream: null,
      programs: null,
      departments: null,
      open: false,
    },
    tenantId: "foo",
    id: "385485022455913995",
    engagementRef: {
      id: "385484718671033961",
      name: "Nitesh - testing process",
      erpId: "",
      refId: "",
      empty: false,
    },
    name: "Order form",
    type: {
      id: "orderForm",
      name: "Order form",
      erpId: "",
      systemId: "",
      empty: false,
    },
    status: "Active",
    pastVersions: [
      {
        filename: "System.csv",
        mediatype: "text/csv",
        size: 108,
        path: "attachment/2023/12/6/385485562698601503/System.csv",
        sourceUrl: null,
        reference: null,
        date: null,
        expiration: null,
        name: null,
        note: null,
        eid: null,
        asyncPutUrl: null,
        asyncGetUrl: null,
        created: "2023-12-06T11:04:31.844958954Z",
        issueDate: null,
        createdBy: {
          tenantId: "foo",
          tenantName: "Foo Company",
          userName: "john@foo.com",
          name: "John Doe",
          department: null,
          departmentCode: null,
          departmentErpId: null,
          groupIds: null,
          type: "Tenant",
          email: "john@foo.com",
          phone: null,
          firstName: null,
          lastName: null,
          api: false,
          picture: null,
          ip: "152.57.229.135",
          impersonator: null,
          connectionName: null,
          procurementAdmin: true,
          admin: true,
          otp: false,
        },
        docType: null,
        contentKind: "CustomerPrivate",
      },
    ],
    owners: [
      {
        tenantId: "foo",
        tenantName: null,
        userName: "john@foo.com",
        name: "John Doe",
        department: "",
        departmentCode: null,
        departmentErpId: null,
        groupIds: null,
        type: null,
        email: "john@foo.com",
        phone: null,
        firstName: "",
        lastName: "",
        api: false,
        picture: "",
        ip: null,
        impersonator: null,
        connectionName: null,
        procurementAdmin: false,
        admin: false,
        otp: false,
      },
    ],
    autoRenew: false,
    terminationNoticePeriod: 0,
    sourceUrl:
      "https://www.figma.com/file/lWHUwPIz61DR01xV9FQHek/Forms?node-id=13273%3A19956&mode=dev",
    sourceUrlAttachment: {
      filename: null,
      mediatype: null,
      size: 0,
      path: null,
      sourceUrl:
        "https://www.figma.com/file/lWHUwPIz61DR01xV9FQHek/Forms?node-id=13273%3A19956&mode=dev",
      reference: null,
      date: null,
      expiration: null,
      name: null,
      note: null,
      eid: null,
      asyncPutUrl: null,
      asyncGetUrl: null,
      created: "2023-12-06T11:06:12.445054463Z",
      issueDate: null,
      createdBy: {
        tenantId: "foo",
        tenantName: "Foo Company",
        userName: "john@foo.com",
        name: "John Doe",
        department: null,
        departmentCode: null,
        departmentErpId: null,
        groupIds: null,
        type: "Tenant",
        email: "john@foo.com",
        phone: null,
        firstName: null,
        lastName: null,
        api: false,
        picture: null,
        ip: "152.57.229.135",
        impersonator: null,
        connectionName: null,
        procurementAdmin: true,
        admin: true,
        otp: false,
      },
      docType: null,
      contentKind: "CustomerPrivate",
    },
    engagementOnly: false,
    sensitive: false,
    editableByUser: true,
    signatureStatus: "draft",
    taxDocument: false,
  },
  {
    versionNum: "1",
    created: "2023-12-06T11:09:09.040657797Z",
    updated: "2023-12-06T11:09:19.067660022Z",
    createdBy: {
      tenantId: "foo",
      tenantName: "Foo Company",
      userName: "john@foo.com",
      name: "John Doe",
      department: null,
      departmentCode: null,
      departmentErpId: null,
      groupIds: null,
      type: "Tenant",
      email: "john@foo.com",
      phone: null,
      firstName: null,
      lastName: null,
      api: false,
      picture: null,
      ip: "152.57.229.135",
      impersonator: null,
      connectionName: null,
      procurementAdmin: true,
      admin: true,
      otp: false,
    },
    updatedBy: {
      tenantId: "foo",
      tenantName: "Foo Company",
      userName: "john@foo.com",
      name: "John Doe",
      department: null,
      departmentCode: null,
      departmentErpId: null,
      groupIds: null,
      type: "Tenant",
      email: "john@foo.com",
      phone: null,
      firstName: null,
      lastName: null,
      api: false,
      picture: null,
      ip: "152.57.229.135",
      impersonator: null,
      connectionName: null,
      procurementAdmin: true,
      admin: true,
      otp: false,
    },
    audit: {
      entries: [
        {
          time: "2023-12-06T11:09:19.067223685",
          userId: {
            tenantId: "foo",
            tenantName: "Foo Company",
            userName: "john@foo.com",
            name: "John Doe",
            department: null,
            departmentCode: null,
            departmentErpId: null,
            groupIds: null,
            type: "Tenant",
            email: "john@foo.com",
            phone: null,
            firstName: null,
            lastName: null,
            api: false,
            picture: null,
            ip: "152.57.229.135",
            impersonator: null,
            connectionName: null,
            procurementAdmin: true,
            admin: true,
            otp: false,
          },
          ip: "152.57.229.135",
        },
      ],
    },
    acl: {
      users: null,
      groups: null,
      workstream: null,
      programs: null,
      departments: null,
      open: false,
    },
    tenantId: "foo",
    id: "385486725351726603",
    engagementRef: {
      id: "385484718671033961",
      name: "Nitesh - testing process",
      erpId: "",
      refId: "",
      empty: false,
    },
    name: "Statement of Work (SOW)",
    type: {
      id: "sow",
      name: "Statement of Work (SOW)",
      erpId: "",
      systemId: "",
      empty: false,
    },
    status: "Active",
    attachment: {
      filename: "System1.csv",
      mediatype: "text/csv",
      size: 82,
      path: "attachment/2023/12/6/385486767391235595/System1.csv",
      sourceUrl: null,
      reference: null,
      date: null,
      expiration: null,
      name: null,
      note: null,
      eid: null,
      asyncPutUrl: null,
      asyncGetUrl: null,
      created: "2023-12-06T11:09:19.067005347Z",
      issueDate: null,
      createdBy: {
        tenantId: "foo",
        tenantName: "Foo Company",
        userName: "john@foo.com",
        name: "John Doe",
        department: null,
        departmentCode: null,
        departmentErpId: null,
        groupIds: null,
        type: "Tenant",
        email: "john@foo.com",
        phone: null,
        firstName: null,
        lastName: null,
        api: false,
        picture: null,
        ip: "152.57.229.135",
        impersonator: null,
        connectionName: null,
        procurementAdmin: true,
        admin: true,
        otp: false,
      },
      docType: null,
      contentKind: "CustomerPrivate",
    },
    owners: [
      {
        tenantId: "foo",
        tenantName: null,
        userName: "john@foo.com",
        name: "John Doe",
        department: "",
        departmentCode: null,
        departmentErpId: null,
        groupIds: null,
        type: null,
        email: "john@foo.com",
        phone: null,
        firstName: "",
        lastName: "",
        api: false,
        picture: "",
        ip: null,
        impersonator: null,
        connectionName: null,
        procurementAdmin: false,
        admin: false,
        otp: false,
      },
    ],
    autoRenew: false,
    terminationNoticePeriod: 0,
    engagementOnly: false,
    sensitive: false,
    editableByUser: true,
    signatureStatus: "draft",
    taxDocument: false,
  },
  {
    versionNum: "1",
    created: "2023-12-06T11:09:30.000183526Z",
    updated: "2023-12-06T11:09:38.480719718Z",
    createdBy: {
      tenantId: "foo",
      tenantName: "Foo Company",
      userName: "john@foo.com",
      name: "John Doe",
      department: null,
      departmentCode: null,
      departmentErpId: null,
      groupIds: null,
      type: "Tenant",
      email: "john@foo.com",
      phone: null,
      firstName: null,
      lastName: null,
      api: false,
      picture: null,
      ip: "152.57.229.135",
      impersonator: null,
      connectionName: null,
      procurementAdmin: true,
      admin: true,
      otp: false,
    },
    updatedBy: {
      tenantId: "foo",
      tenantName: "Foo Company",
      userName: "john@foo.com",
      name: "John Doe",
      department: null,
      departmentCode: null,
      departmentErpId: null,
      groupIds: null,
      type: "Tenant",
      email: "john@foo.com",
      phone: null,
      firstName: null,
      lastName: null,
      api: false,
      picture: null,
      ip: "152.57.229.135",
      impersonator: null,
      connectionName: null,
      procurementAdmin: true,
      admin: true,
      otp: false,
    },
    audit: {
      entries: [
        {
          time: "2023-12-06T11:09:38.480371764",
          userId: {
            tenantId: "foo",
            tenantName: "Foo Company",
            userName: "john@foo.com",
            name: "John Doe",
            department: null,
            departmentCode: null,
            departmentErpId: null,
            groupIds: null,
            type: "Tenant",
            email: "john@foo.com",
            phone: null,
            firstName: null,
            lastName: null,
            api: false,
            picture: null,
            ip: "152.57.229.135",
            impersonator: null,
            connectionName: null,
            procurementAdmin: true,
            admin: true,
            otp: false,
          },
          ip: "152.57.229.135",
        },
      ],
    },
    acl: {
      users: null,
      groups: null,
      workstream: null,
      programs: null,
      departments: null,
      open: false,
    },
    tenantId: "foo",
    id: "385486813264338443",
    engagementRef: {
      id: "385484718671033961",
      name: "Nitesh - testing process",
      erpId: "",
      refId: "",
      empty: false,
    },
    name: "Order form",
    type: {
      id: "orderForm",
      name: "Order form",
      erpId: "",
      systemId: "",
      empty: false,
    },
    status: "Active",
    attachment: {
      filename: "CompanyEntity1.csv",
      mediatype: "text/csv",
      size: 1939,
      path: "attachment/2023/12/6/385486848814814239/CompanyEntity1.csv",
      sourceUrl: null,
      reference: null,
      date: null,
      expiration: null,
      name: null,
      note: null,
      eid: null,
      asyncPutUrl: null,
      asyncGetUrl: null,
      created: "2023-12-06T11:09:38.480173137Z",
      issueDate: null,
      createdBy: {
        tenantId: "foo",
        tenantName: "Foo Company",
        userName: "john@foo.com",
        name: "John Doe",
        department: null,
        departmentCode: null,
        departmentErpId: null,
        groupIds: null,
        type: "Tenant",
        email: "john@foo.com",
        phone: null,
        firstName: null,
        lastName: null,
        api: false,
        picture: null,
        ip: "152.57.229.135",
        impersonator: null,
        connectionName: null,
        procurementAdmin: true,
        admin: true,
        otp: false,
      },
      docType: null,
      contentKind: "CustomerPrivate",
    },
    owners: [
      {
        tenantId: "foo",
        tenantName: null,
        userName: "john@foo.com",
        name: "John Doe",
        department: "",
        departmentCode: null,
        departmentErpId: null,
        groupIds: null,
        type: null,
        email: "john@foo.com",
        phone: null,
        firstName: "",
        lastName: "",
        api: false,
        picture: "",
        ip: null,
        impersonator: null,
        connectionName: null,
        procurementAdmin: false,
        admin: false,
        otp: false,
      },
    ],
    autoRenew: false,
    terminationNoticePeriod: 0,
    engagementOnly: false,
    sensitive: false,
    editableByUser: true,
    signatureStatus: "draft",
    taxDocument: false,
  },
];

const signedLegalDocumentList = [
  {
    versionNum: "1",
    created: "2023-12-06T03:56:25.145381062Z",
    updated: "2023-12-06T03:56:25.152542170Z",
    createdBy: {
      tenantId: "foo",
      tenantName: "Foo Company",
      userName: "john@foo.com",
      name: "John Doe",
      department: null,
      departmentCode: null,
      departmentErpId: null,
      groupIds: null,
      type: "Tenant",
      email: "john@foo.com",
      phone: null,
      firstName: null,
      lastName: null,
      api: false,
      picture: null,
      ip: "152.57.226.170",
      impersonator: null,
      connectionName: null,
      procurementAdmin: true,
      admin: true,
      otp: false,
    },
    updatedBy: {
      tenantId: "foo",
      tenantName: "Foo Company",
      userName: "john@foo.com",
      name: "John Doe",
      department: null,
      departmentCode: null,
      departmentErpId: null,
      groupIds: null,
      type: "Tenant",
      email: "john@foo.com",
      phone: null,
      firstName: null,
      lastName: null,
      api: false,
      picture: null,
      ip: "152.57.226.170",
      impersonator: null,
      connectionName: null,
      procurementAdmin: true,
      admin: true,
      otp: false,
    },
    audit: {
      entries: [
        {
          time: "2023-12-06T03:56:25.147631893",
          userId: {
            tenantId: "foo",
            tenantName: "Foo Company",
            userName: "john@foo.com",
            name: "John Doe",
            department: null,
            departmentCode: null,
            departmentErpId: null,
            groupIds: null,
            type: "Tenant",
            email: "john@foo.com",
            phone: null,
            firstName: null,
            lastName: null,
            api: false,
            picture: null,
            ip: "152.57.226.170",
            impersonator: null,
            connectionName: null,
            procurementAdmin: true,
            admin: true,
            otp: false,
          },
          ip: "152.57.226.170",
        },
      ],
    },
    acl: {
      users: null,
      groups: null,
      workstream: null,
      programs: null,
      departments: null,
      open: false,
    },
    tenantId: "foo",
    id: "385377824882508607",
    engagementRef: {
      id: "382956502413321755",
      name: "Nitesh - testing process",
      erpId: "",
      refId: "",
      empty: false,
    },
    name: "Master Service Agreement (MSA)",
    type: {
      id: "msa",
      name: "Master Service Agreement (MSA)",
      erpId: "",
      systemId: "",
      empty: false,
    },
    status: "Active",
    attachment: {
      filename: "CompanyEntity.csv",
      mediatype: "text/csv",
      size: 0,
      path: "attachment/2023/12/6/385377824844759871/CompanyEntity.csv",
      sourceUrl: null,
      reference: null,
      date: null,
      expiration: null,
      name: null,
      note: null,
      eid: null,
      asyncPutUrl: null,
      asyncGetUrl: null,
      created: "2023-12-06T03:56:25.144047735Z",
      issueDate: null,
      createdBy: {
        tenantId: "foo",
        tenantName: "Foo Company",
        userName: "john@foo.com",
        name: "John Doe",
        department: null,
        departmentCode: null,
        departmentErpId: null,
        groupIds: null,
        type: "Tenant",
        email: "john@foo.com",
        phone: null,
        firstName: null,
        lastName: null,
        api: false,
        picture: null,
        ip: "152.57.226.170",
        impersonator: null,
        connectionName: null,
        procurementAdmin: true,
        admin: true,
        otp: false,
      },
      docType: null,
      contentKind: "CustomerPrivate",
    },
    owners: [
      {
        tenantId: "foo",
        tenantName: "Foo Company",
        userName: "john@foo.com",
        name: "John Doe",
        department: null,
        departmentCode: null,
        departmentErpId: null,
        groupIds: null,
        type: "Tenant",
        email: "john@foo.com",
        phone: null,
        firstName: null,
        lastName: null,
        api: false,
        picture: null,
        ip: "152.57.226.170",
        impersonator: null,
        connectionName: null,
        procurementAdmin: true,
        admin: true,
        otp: false,
      },
    ],
    autoRenew: false,
    terminationNoticePeriod: 0,
    engagementOnly: false,
    sensitive: false,
    editableByUser: true,
    signatureStatus: "signed",
    taxDocument: false,
  },
];

getI18NInstance(true);

export const TemplateForm = {
  args: {
    id: "id",
    formDefinition: mockConfig,
    // formData: questionnaire.data.data,
    formData: {
      _p_Attachment__p_: {
        filename: "CallbackOutcome (1).csv",
        mediatype: "text/csv",
        size: 293,
        path: "attachment/2022/6/21/192287867161018368/CallbackOutcome (1).csv",
        reference: null,
        date: null,
        expiration: null,
        name: null,
        note: null,
        eid: null,
        asyncPutUrl: null,
        asyncGetUrl: null,
        issueDate: null,
        contentKind: "CustomerPrivate",
      },
      _p_Attachments__p_: [
        {
          filename: "CallbackOutcome (1).csv",
          mediatype: "text/csv",
          size: 293,
          path: "attachment/2022/6/21/192287867161018368/CallbackOutcome (1).csv",
          reference: null,
          date: null,
          expiration: null,
          name: null,
          note: null,
          eid: null,
          asyncPutUrl: null,
          asyncGetUrl: null,
          issueDate: null,
          contentKind: "CustomerPrivate",
        },
      ],
      q4__p_Please_provide_the_item_det: {
        items: [
          {
            name: "Item 1",
            data: extensionFormData,
          },
        ],
      },
    },
    // locale: "de-DE",
    // localLabels: {},
    options: {
      currency: mockCurrencyOptions,
      category: mockCategory,
      canUserDeleteLegalDocument: true,
      defaultAccountCode: {
        id: "Marketing",
        name: "Marketing",
        erpId: "",
      },
      accountCode: mockCategory,
      unitPerQuantity: mockUnitPerQuantity,
      country: mockCountryOptions,
      documentType: mockDocumentTypeOptions,
      draftDocuments: [],
      signedDocuments: signedLegalDocumentList,
      role: mockOptionsDefault,
    },
    dataFetchers: {
      getDoucumentByPath: () => Promise.resolve(mockCsvFile),
      getDocumentByName: () => Promise.resolve(mockCsvFile),
      getMasterdata: () => Promise.resolve(mockOptionsDefault),
      getParsedAddress: () => Promise.resolve(mockAddress),
      getUser: () =>
        Promise.resolve([
          {
            firstName: "User",
            lastName: "1",
            userName: "user1",
            email: "user1@orolabs.ai",
            picture:
              "https://assets.dev.orolabs.ai/oro%2Fimages%2Fusers%2Ffoo%2Fgandharva.jadhav%40orolabs.ai1662554835734",
          },
          {
            firstName: "User",
            lastName: "2",
            userName: "user2",
            email: "user2@orolabs.ai",
            picture:
              "https://assets.dev.orolabs.ai/oro%2Fimages%2Fusers%2Ffoo%2Fgandharva.jadhav%40orolabs.ai1662554835734",
          },
        ]),
      getUsersByAssignmentConfig: () => {
        console.log("in getUsersByAssignmentConfig");
        return Promise.resolve([
          {
            firstName: "User",
            lastName: "3",
            userName: "user3",
            email: "user3@orolabs.ai",
            picture:
              "https://assets.dev.orolabs.ai/oro%2Fimages%2Fusers%2Ffoo%2Fgandharva.jadhav%40orolabs.ai1662554835734",
          },
        ]);
      },
      searchObjects: () =>
        Promise.resolve({
          objs: [
            {
              poNumber: "PO123",
              normalizedVendorRef: {
                name: "Normalized Vendor",
                selectedVendorRecord: { name: "Vendor Record" },
              },
              cost: 10000,
              currencyCode: "USD",
              departmentRef: { name: "Department" },
              companyEntityRef: { name: "Company Entity" },
              start: "2024-01-22",
              end: "2024-01-29",
              accountRef: { name: "Account Code" },
            },
          ],
          total: 10,
        }),
      getPO: () =>
        Promise.resolve({
          poNumber: "PO123",
          normalizedVendorRef: {
            name: "Normalized Vendor",
            selectedVendorRecord: { name: "Vendor Record" },
          },
          cost: 10000,
          currencyCode: "USD",
          departmentRef: { name: "Department" },
          companyEntityRef: { name: "Company Entity" },
          start: "2024-01-22",
          end: "2024-01-29",
          accountRef: { name: "Account Code" },
        }),
    },
    events: {
      fetchExtensionCustomFormDefinition: () => Promise.resolve(mockConfig2),
      fetchExtensionCustomFormData: () => Promise.resolve(extensionFormData),
      refreshExtensionCustomFormData: () => Promise.resolve(extensionFormData),
    },
    submitLabel: "Trigger submit",
  },
};
